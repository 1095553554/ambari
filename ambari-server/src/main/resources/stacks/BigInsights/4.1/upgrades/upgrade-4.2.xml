<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->


<upgrade xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <target>4.2.*.*</target>
  <target-stack>BigInsights-4.2</target-stack>
  <type>ROLLING</type>
  <skip-failures>false</skip-failures>
  <skip-service-check-failures>false</skip-service-check-failures>
  <prerequisite-checks>
    <!-- List of additional pre-req checks to run in addition to the required pre-reqs -->
    <check>org.apache.ambari.server.checks.HiveMultipleMetastoreCheck</check>
    <check>org.apache.ambari.server.checks.HiveHighAvailabilityPortsCheck</check>
    <check>org.apache.ambari.server.checks.HCatClientInstallationCheck</check>
    <check>org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck</check>
    <check>org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck</check>
    <check>org.apache.ambari.server.checks.ServicesNamenodeHighAvailabilityCheck</check>
    <check>org.apache.ambari.server.checks.ServicesNamenodeTruncateCheck</check>
    <check>org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck</check>
    <check>org.apache.ambari.server.checks.ServicesYarnWorkPreservingCheck</check>
    <check>org.apache.ambari.server.checks.YarnRMHighAvailabilityCheck</check>
    <check>org.apache.ambari.server.checks.YarnTimelineServerStatePreservingCheck</check>

    <configuration>
      <!-- Configuration properties for all pre-reqs including required pre-reqs -->
      <check-properties name="org.apache.ambari.server.checks.YarnTimelineServerStatePreservingCheck">
        <property name="min-applicable-stack-version">BigInsights-4.0</property>
      </check-properties>
      
      <check-properties name="org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck">
        <property name="min-failure-stack-version">BigInsights-4.1</property>
      </check-properties>
    </configuration>
  </prerequisite-checks>
  
  <order>
    <group xsi:type="cluster" name="PRE_CLUSTER" title="Prepare Upgrade">
      <direction>UPGRADE</direction>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      
      <execute-stage title="Pre Upgrade verify component versions">
        <task xsi:type="manual">
          <message>
            Before continuing, please make sure all component versions are at 4.1.0.0 on all nodes.  On each node run "iop-select status all".  For each component that returns a version other than 4.1.0.0, run "iop-select set [component_name] 4.1.0.0" to update component version. 
          </message>
        </task>
      </execute-stage>

      <execute-stage service="SOLR" component="SOLR" title="Configure Solr Conf">
        <task xsi:type="execute" hosts="all" summary="Configure Solr conf">
          <script>scripts/solr_upgrade.py</script>
          <function>pre_upgrade_conf41</function>
        </task>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Pre Upgrade HDFS">
        <task xsi:type="execute" hosts="master">
          <script>scripts/namenode.py</script>
          <function>prepare_rolling_upgrade</function>
        </task>
      </execute-stage>
    </group>
      
    <group xsi:type="cluster" name="PREPARE_BACKUPS" title="Prepare Backups">
      <direction>UPGRADE</direction>
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      
      <execute-stage service="HBASE" component="HBASE_MASTER" title="Pre Upgrade HBase Backup">
        <task xsi:type="execute" hosts="master">
          <script>scripts/hbase_upgrade.py</script>
          <function>snapshot</function>
        </task>
      </execute-stage>

      <execute-stage service="HIVE" component="HIVE_METASTORE" title="Pre Upgrade Hive Backup">
        <task xsi:type="manual">
          <message>Before continuing, please backup the Hive Metastore database referenced by the Hive Metastore service(s) on the following host(s): {{hosts.all}}.</message>
        </task>
      </execute-stage>

      <execute-stage service="OOZIE" component="OOZIE_SERVER" title="Pre Upgrade Oozie Backup">
        <task xsi:type="manual">
          <message>Before continuing, please backup the Oozie Server database referenced by the Oozie server located on {{hosts.all}}.</message>
        </task>
      </execute-stage>

      <execute-stage service="SOLR" component="SOLR" title="Backup Solr Cores">
        <task xsi:type="manual">
          <message>Before continuing, please backup the Solr cores if not using replication, E.g., su - solr "curl http://localhost:8983/solr/&lt;core-name&gt;/replication?command=backup". Confirm backup completed with "curl http://localhost:8983/solr/&lt;core-name&gt;/replication?command=details"</message>
        </task>
      </execute-stage>

      <execute-stage service="SOLR" component="SOLR" title="Backup Solr Cores">
        <task xsi:type="execute" hosts="all">
          <script>scripts/solr_upgrade.py</script>
          <function>pre_stop_backup_cores</function>
        </task>
      </execute-stage>
    </group>

    <!-- <group xsi:type="cluster" name="RESTORE_CONFIG_DIRS" title="Restore Configuration Directories">
      <direction>DOWNGRADE</direction>
      <execute-stage title="Restore configuration directories and remove BigInsights 4.2 symlinks">
        <task xsi:type="execute">
          <script>scripts/ru_set_all.py</script>
          <function>unlink_all_configs</function>
        </task>
      </execute-stage>
    </group> -->

    <group name="ZOOKEEPER" title="ZooKeeper">
      <service name="ZOOKEEPER">
        <component>ZOOKEEPER_SERVER</component>
      </service>
    </group>
    
    <group name="CORE_MASTER" title="Core Masters">
      <service-check>false</service-check>
      <service name="HDFS">
        <component>JOURNALNODE</component>
        <component>NAMENODE</component>
        <component>ZKFC</component>
      </service>

      <service name="MAPREDUCE2">
        <component>HISTORYSERVER</component>
      </service>

      <service name="YARN">
        <component>APP_TIMELINE_SERVER</component>
        <component>RESOURCEMANAGER</component>
      </service>

      <service name="HBASE">
        <component>HBASE_MASTER</component>
      </service>
      
    </group>
    
    <group name="SERVICE_CHECK" title="All Service Checks" xsi:type="service-check">
      <skippable>true</skippable>
      <direction>UPGRADE</direction>
      <priority>
        <service>ZOOKEEPER</service>
        <service>HDFS</service>
        <service>MAPREDUCE2</service>
        <service>YARN</service>
        <service>HBASE</service>
      </priority>
      <exclude>
        <service>AMBARI_METRICS</service>
      </exclude>
    </group>
    
    <group name="CORE_SLAVES" title="Core Slaves" xsi:type="colocated">
      <skippable>true</skippable>
      <service-check>false</service-check>
      <service name="HDFS">
        <component>DATANODE</component>
	<component>NFS_GATEWAY</component>
      </service>
      
      <service name="HBASE">
        <component>HBASE_REGIONSERVER</component>
      </service>

      <service name="YARN">
        <component>NODEMANAGER</component>
      </service>

      <batch>
        <percent>20</percent>
        <summary>Verification Required</summary>
        <message>The initial batch of {{components}} hosts have been {{direction.past}}. You are advised to check the hosts and perform cluster/workload-specific tests against your cluster to ensure proper operation before proceeding with {{direction.text}} of the remaining services.</message>
      </batch>
    </group>
    
    <group name="SERVICE_CHECK" title="All Service Checks" xsi:type="service-check">
      <skippable>true</skippable>
      <direction>UPGRADE</direction>
      <priority>
        <service>ZOOKEEPER</service>
        <service>HDFS</service>
        <service>YARN</service>
        <service>HBASE</service>
      </priority>
      <exclude>
        <service>AMBARI_METRICS</service>
      </exclude>
    </group>

    <group name="HIVE" title="Hive">
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <service name="HIVE">
        <component>HIVE_METASTORE</component>
        <component>HIVE_SERVER</component>
        <component>WEBHCAT_SERVER</component>
      </service>
    </group>

    <group name="SPARK" title="Spark">
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <service name="SPARK">
        <component>SPARK_JOBHISTORYSERVER</component>
        <component>SPARK_THRIFTSERVER</component>
      </service>
    </group>
    
    <group name="SPARK_CLIENTS" title="Spark Clients">
      <skippable>true</skippable>
      <service name="SPARK">
        <component>SPARK_CLIENT</component>
      </service>
    </group>

    <group name="OOZIE" title="Oozie">
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <service-check>false</service-check>
      <service name="OOZIE">
        <component>OOZIE_SERVER</component>
        <component>OOZIE_CLIENT</component>
      </service>
    </group>
    
    <group name="OOZIE_CLIENTS" title="Oozie Clients">
      <skippable>true</skippable>
      <service name="OOZIE">
        <component>OOZIE_CLIENT</component>
      </service>
    </group>
    
    <group name="CLIENTS" title="Client Components">
      <service-check>false</service-check>
      <service name="ZOOKEEPER">
        <component>ZOOKEEPER_CLIENT</component>
      </service>
      <service name="HDFS">
        <component>HDFS_CLIENT</component>
      </service>

      <service name="YARN">
        <component>YARN_CLIENT</component>
      </service>

      <service name="MAPREDUCE2">
        <component>MAPREDUCE2_CLIENT</component>
      </service>

      <service name="HBASE">
        <component>HBASE_CLIENT</component>
      </service>

      <service name="PIG">
        <component>PIG</component>
      </service>

      <service name="SQOOP">
        <component>SQOOP</component>
      </service>

      <service name="HIVE">
        <component>HIVE_CLIENT</component>
        <component>HCAT</component>
      </service>
    </group>

    <group name="SERVICE_CHECK" title="All Service Checks" xsi:type="service-check">
      <skippable>true</skippable>
      <direction>UPGRADE</direction>
      <priority>
        <service>ZOOKEEPER</service>
        <service>HDFS</service>
        <service>YARN</service>
        <service>HBASE</service>
      </priority>
      <exclude>
        <service>AMBARI_METRICS</service>
      </exclude>
    </group>

    <group name="KAFKA" title="Kafka">
      <skippable>true</skippable>
      <service name="KAFKA">
        <component>KAFKA_BROKER</component>
      </service>
    </group>

    <group name="KNOX" title="Knox">
      <skippable>true</skippable>
      <service name="KNOX">
        <component>KNOX_GATEWAY</component>
      </service>
    </group>

    <group name="SLIDER" title="Slider">
      <skippable>true</skippable>
      <service name="SLIDER">
        <component>SLIDER</component>
      </service>
    </group>

    <group name="FLUME" title="Flume">
      <skippable>true</skippable>
      <service name="FLUME">
        <component>FLUME_HANDLER</component>
      </service>
    </group>

    <group name="SOLR" title="Solr">
      <skippable>true</skippable>
      <service name="SOLR">
        <component>SOLR</component>
      </service>
    </group>

    <group xsi:type="cluster" name="ALL_HOST_OPS" title="Finalize Hosts">
      <execute-stage title="Update remaining BigInsights stack to {{version}}">
        <task xsi:type="execute">
          <script>scripts/ru_set_all.py</script>
          <function>actionexecute</function>
        </task>
      </execute-stage>
    </group>

    <group xsi:type="cluster" name="FINALIZE_PRE_CHECK" title="Finalize {{direction.text.proper}} Pre-Check">
      <direction>UPGRADE</direction>
      
      <execute-stage title="Check Component Versions">
        <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.ComponentVersionCheckAction" />
      </execute-stage>
    </group>

    <group xsi:type="cluster" name="POST_CLUSTER" title="Finalize {{direction.text.proper}}">
      <skippable>true</skippable>
      <supports-auto-skip-failure>false</supports-auto-skip-failure>
      <execute-stage title="Confirm Finalize">
        <direction>UPGRADE</direction>
        <task xsi:type="manual">
          <message>
            Please confirm you are ready to finalize. 
            Once the cluster is finalized. 
            Run /usr/lib/python2.6/site-packages/ambari_server/alertDefinitionUpdate.py -c [cluster_name] -p [ambari_server_port] -u [admin_user_name] -a [admin_user_password] to update alert definitions. 
            Run /usr/lib/python2.6/site-packages/ambari_server/alertDefinitionUpdate.py -h for usage details.
          </message>
        </task>
      </execute-stage>

      <execute-stage service="HDFS" component="NAMENODE" title="Execute HDFS Finalize">
        <task xsi:type="execute" hosts="master">
          <script>scripts/namenode.py</script>
          <function>finalize_rolling_upgrade</function>
        </task>
      </execute-stage>
      
      <execute-stage title="Save Cluster State" service="" component="">
        <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.FinalizeUpgradeAction">
        </task>
      </execute-stage>
    </group>
  </order>

  <processing>
    <service name="ZOOKEEPER">
      <component name="ZOOKEEPER_SERVER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="ZOOKEEPER_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="HDFS">
      <component name="NAMENODE">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_namenode_update_hadoop_env" />
          <task xsi:type="configure" id="biginsights_4_2_namenode_ha_adjustments" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="DATANODE">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="NFS_GATEWAY">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HDFS_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
        <post-upgrade>
          <task xsi:type="manual">
            <message>Please make sure to restart Oozie service after the finalization, in order to refresh the Hadoop related configurations.</message>
          </task>
        </post-upgrade>
      </component>

      <component name="JOURNALNODE">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
      
      <component name="ZKFC">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="MAPREDUCE2">
      <component name="HISTORYSERVER">
      
        <pre-upgrade>
          <task xsi:type="manual">
            <summary>Verify HDFS Safe Mode is off</summary>
            <message>
              Before continuing, please verify that HDFS has exited safe mode by running the "hdfs dfsadmin -safemode get" command as the HDFS user on an HDFS node.
              Make sure the output indicates that safe mode is off on the NameNode hosts listed.
              Also make sure one of the NameNodes is the active NameNode by running  "hdfs haadmin -getServiceState [NameNode identifier]" as the HDFS user on an HDFS node.
              The NameNode identifiers are listed in dfs.ha.namenodes.{{hdfs-site/dfs.nameservices}}.
              By default the NameNode identifiers are "nn1" and "nn2", so the commands would be:
              "hdfs haadmin -getServiceState nn1" and "hdfs haadmin -getServiceState nn2". 
            </message>
          </task>
        
          <task xsi:type="configure" id="biginsights_4_2_mapreduce_application_framework_patch" />
          <task xsi:type="configure" id="biginsights_4_2_mapreduce2_adjust_history_server" />
        </pre-upgrade>
      
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
        
      </component>

      <component name="MAPREDUCE2_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="YARN">
      <component name="APP_TIMELINE_SERVER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_yarn_ats_enable_recovery" />
          <task xsi:type="configure" id="biginsights_4_2_yarn_keep_ats_v1" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="RESOURCEMANAGER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_yarn_rm_disable_node_labels" />
          <task xsi:type="configure" id="biginsights_4_2_yarn_rm_clear_default_node_label_expression" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="NODEMANAGER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="YARN_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>
    <service name="HBASE">
      <component name="HBASE_MASTER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_hbase_master_set_global_memstore_size" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HBASE_REGIONSERVER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HBASE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>
   
    <service name="PIG">
      <component name="PIG">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="SQOOP">
      <component name="SQOOP">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="HIVE">
      <component name="HIVE_METASTORE">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HIVE_SERVER">
        <pre-upgrade>
          <task xsi:type="manual">
            <summary>HiveServer Port Availability</summary>
            <message>
            Please note that the HiveServer port will now change to {{hive-site/hive.server2.thrift.port.ru}} if Hive is using a binary transfer mode
            or {{hive-site/hive.server2.thrift.http.port.ru}} if Hive is using an http transport mode.
            Please make sure the port is available on each of following HiveServer host(s): {{hosts.all}}.If the port is not available, the process using it must be terminated.
            You can restore the old port value once the rolling upgrade is finalized. 
            </message>
          </task>
          <task xsi:type="configure" id="biginsights_4_2_hive_server_set_transport_mode" />
          <task xsi:type="configure" id="biginsights_4_2_0_0_hive_server_configure_authentication"/>          
        </pre-upgrade>
        <pre-downgrade>
          <task xsi:type="manual">
            <summary>HiveServer Port Availability</summary>
            <message>
            Please note that the HiveServer port will now change to {{hive-site/hive.server2.thrift.port.rd}} if Hive is using a binary transfer mode
            or {{hive-site/hive.server2.thrift.http.port.rd}} if Hive is using an http transport mode.
            Please make sure the port is available on each of following HiveServer host(s): {{hosts.all}}.
            If the port is not available, the process using it must be terminated.
            </message>
          </task>
          <task xsi:type="configure" id="biginsights_4_2_hive_server_restore_transport_mode_on_downgrade" />
        </pre-downgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="WEBHCAT_SERVER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_webhcat_server_update_environment_configuration" />
          <task xsi:type="configure" id="biginsights_4_2_webhcat_server_update_configurations" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HIVE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>

      <component name="HCAT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="SLIDER">
      <component name="SLIDER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="SPARK">
      <component name="SPARK_JOBHISTORYSERVER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
      <component name="SPARK_THRIFTSERVER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
      <component name="SPARK_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="OOZIE">
      <component name="OOZIE_SERVER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_oozie_server_update_configurations" />
          <task xsi:type="configure" id="biginsights_4_2_oozie_server_update_environment_configurations" />
          <task xsi:type="execute" hosts="all" summary="Shut down all Oozie servers">
            <script>scripts/oozie_server.py</script>
            <function>stop</function>
          </task>
        </pre-upgrade>
      
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
      <component name="OOZIE_CLIENT">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="KAFKA">
      <component name="KAFKA_BROKER">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_update_kafka_delete_port" />
        </pre-upgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="KNOX">
      <component name="KNOX_GATEWAY">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="FLUME">
      <component name="FLUME_HANDLER">
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>

    <service name="SOLR">
      <component name="SOLR">
        <pre-upgrade>
          <task xsi:type="configure" id="biginsights_4_2_solr_server_update_log4j_configurations" />
          <task xsi:type="configure" id="biginsights_4_2_solr_server_update_solr_home_configurations" />
          <task xsi:type="execute" hosts="all" summary="Move Solr cores to new home directory">
            <script>scripts/solr_upgrade.py</script>
            <function>pre_start_migrate_cores</function>
          </task>
        </pre-upgrade>
        <pre-downgrade>
          <task xsi:type="configure" id="biginsights_4_2_solr_server_downgrade_log4j_configurations" />
          <task xsi:type="configure" id="biginsights_4_2_solr_server_downgrade_solr_home_configurations" />
        </pre-downgrade>
        <upgrade>
          <task xsi:type="restart-task" />
        </upgrade>
      </component>
    </service>
  </processing>
</upgrade>
